{
  "name": "lmd",
  "description": "LMD: Lazy Module Declaration",
  "author": {
    "name": "Mikhail Davydov",
    "email": "azazel.private@gmail.com"
  },
  "version": "1.10.23",
  "bin": {
    "lmd": "./bin/lmd"
  },
  "main": "./bin/lmd_builder.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:azproduction/lmd.git"
  },
  "keywords": [
    "lmd",
    "amd",
    "module",
    "builder",
    "optimizer",
    "cli",
    "tool",
    "code_coverage",
    "analytics"
  ],
  "dependencies": {
    "uglify-js": "1.3.4",
    "jade": "0.26.1",
    "express": "2.5.9",
    "colors": "= 0.6.0-1",
    "source-map": ">= 0.1.3",
    "optimist": ">= 0.3.5",
    "lodash-template": "1.0.0",
    "glob": ">= 3.1.14"
  },
  "devDependencies": {
    "http-server": ">= 0.5.1",
    "colors": ">= 0.6.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "preferGlobal": true,
  "contributors": [
    {
      "name": "Mikhail Davydov",
      "email": "i@azproduction.ru",
      "url": "http://azproduction.ru/"
    },
    {
      "name": "texnikru",
      "url": "https://github.com/texnikru"
    },
    {
      "name": "Leonid Borisenko",
      "url": "https://github.com/leonidborisenko"
    },
    {
      "name": "Ivan ant-hill",
      "url": "https://github.com/ant-hill"
    },
    {
      "name": "Jonathan Dumaine",
      "email": "jonathan.dumaine@dumstruck.com",
      "url": "http://www.jonathan-dumaine.com/"
    },
    {
      "name": "Alexander Myadzel",
      "email": "myadzel@gmail.com",
      "url": "http://twitter.com/thenameisbusy"
    },
    {
      "name": "Maxceem",
      "url": "https://github.com/Maxceem"
    },
    {
      "name": "Denis Chistyakov",
      "email": "den.chistyakov@gmail.com",
      "url": "http://disachist.ya.ru"
    },
    {
      "name": "alnikitich",
      "url": "https://github.com/alnikitich"
    },
    {
      "name": "Egor Halimonenko",
      "email": "1+github@h123.ru",
      "url": "http://h123.ru"
    },
    {
      "name": "kastigar",
      "url": "https://github.com/kastigar"
    },
    {
      "name": "Vadim Budarin",
      "email": "budarin-vv@yandex.ru"
    },
    {
      "name": "Evgeniy Solodukhin",
      "email": "evgeniy@solodukhin.ru"
    }
  ],
  "readme": "# LMD: Lazy Module Declaration [![Build Status](https://secure.travis-ci.org/azproduction/lmd.png?branch=master)](http://travis-ci.org/azproduction/lmd) [![NPM version](https://badge.fury.io/js/lmd.png)](http://badge.fury.io/js/lmd) [![Dependency Status](https://gemnasium.com/azproduction/lmd.png)](https://gemnasium.com/azproduction/lmd)\n\nNew to LMD? See [Getting Started](https://github.com/azproduction/lmd/wiki/Getting-started),\n[Wiki](https://github.com/azproduction/lmd/wiki/) and [examples](examples/)\n\n## Why LMD? Why not AMD?\n\n - Modules are CommonJS\n   - Actually LMD can work with any JavaScript modules\n   - There is no define wrapper!\n   - You can use node modules without dirty hacks like `typeof exports ? :`\n   - You can use strings as string without any \"template\" plugins\n   - You can use JSON file as Object\n - Total and honest isolation\n   - LMD package is fully-zero-isolated from globals (globals cant access LMD-pacakge, but LMD can)\n   - Modules are isolated from LMD and from each module\n   - Modules can be sandboxed (3-party modules, can exports only)\n   - Plugins are isolated from LMD and from each module\n - Lazy interpretation and load\n   - LMD can load off-package modules (all loaders can do it =)\n   - It can interpret(eval) modules when they are required\n - List of depends are located in separate .json file\n   - Well... list of 2 deps in file are ok, but 5+ are headache\n   - Module is isolated from file system\n   - You have to edit only 1 file if module path changes\n   - Possible to use dynamic require()\n - Config inheritance\n   - Easy to setup development, testing and production builds\n - Build watcher\n   - Watcher detects changes in your files and performs rebuild\n - Flexible source\n   - Minimal only 288bytes\n   - High optimized own code\n   - LMD builder performs build-time optimisations\n - Integrated code-coverage and source analytics tool\n   - Its easy to enable believe me!\n   - No extra servers or movements are required for off-package modules Code-Coverage\n - Transparent localStorage cache\n   - Change config and html a bit and voila!\n - require() is not overloaded\n   - Overloaded require is the way to mess in source\n   - require.css() for css\n   - require.js() for js (non LMD-modules)\n   - require.async() for async LMD-modules (objects, strings, modules)\n - More\n   - Can load CSS\n   - Can work with Node.js and Worker environment\n\n\n## What's on the board\n\n  * All builders/loaders stuff bla-bla-bla\n  * Build Analyzer (1-click code coverage, depends, startup perfomance)\n\n![](images/coverage_package.png)\n\n  * Smart and simple CLI tool\n\n![](images/lmd_cli.png)\n\n  * GUI for LMD (in development)\n\n![](images/lmd_gui_prototype.png)\n\n## Other features\n\n1. Modules are similar to AMD: there is a require, but no define\n2. LMD does not create globals\n3. LMD is standalone, tiny and flexible (minimal only 288bytes!)\n4. Each function-module can be initialized/evaled on demand (`lazy: true`)\n5. LMD module is as easy to debug as normal JavaScript file\n6. Build system compresses JavaScript files using UglifyJs\n7. LMD module can define object via `return` or `module.exports` or `exports` as CommonJS Module\n8. Module can be wrapped automatically in builder so you can write your modules as node.js modules\n9. Starting from version 1.5.2 LMD can require off-package modules `\"async\": true`\n(see [Asynchronous module require](https://github.com/azproduction/lmd/wiki/Off-package-modules))\n10. From version 1.6.0 LMD can cache all in-package modules in localStorage `\"cache\": true`\n(see [Local Storage cache](https://github.com/azproduction/lmd/wiki/LocalStorage-cache))\n11. From version 1.6.2 LMD can include off-package css `css: true` and js-files `js: true`(for jsonp, cross-origin JS or non LMD modules)\n12. LMD package is possible to run as Web Worker or execute as Node.js script\n(see [Web Worker and Node.js](https://github.com/azproduction/lmd/wiki/Workers-and-Node))\n13. LMD works in all modern browsers and in older IE\n14. LMD can convert non-LMD modules to LMD to use jquery or any other as in-package LMD module\n(see [LMD module form third-party modules](https://github.com/azproduction/lmd/wiki/Adopting-modules))\n15. LMD can protect your code from 3-party modules (see [Modules sandbox](https://github.com/azproduction/lmd/wiki/Module-sandbox))\n16. Code Coverage? - Easy! (see [Code coverage](https://github.com/azproduction/lmd/wiki/Analytics-and-Code-coverage))\n17. Ready for production - `lmd.js` is 100% covered by unit tests see [test/README.md](test) for details\n18. SourceMap for all LMD modules (see [Source map](https://github.com/azproduction/lmd/wiki/SourceMap))\n19. Reach CLI interface\n\n## Installing\n\n`npm install lmd -g` global is prefered for LMD CLI comands.\n\n## LMD Config file\n\n**Minimal**\n\n```javascript\n{\n    \"root\": \"../modules/\",\n    \"output\": \"../module.lmd.js\", // Path are relative to the root parameter\n    \"modules\": {\n        \"*\": \"*.js\" // use wildcards or specify regex string to grep\n    }\n}\n```\n\nSee [LMD Config](https://github.com/azproduction/lmd/wiki/LMD-config) for more information\n\n**Note**\n\n - You can extend config file with another using `\"extends\": \"path/to/file.lmd.json\"` parameter\n - You can also specify module depends by adding `\"depends\"` options see [Modules dependencies](https://github.com/azproduction/lmd/wiki/Module-dependencies)\n\n## Build LMD package from Console\n\n`lmd build your_buiild_name`\n\nSee [LMD CLI](https://github.com/azproduction/lmd/wiki/CLI)\n\n## Grunt integration and task\n\nInstall this grunt plugin next to your project's [grunt.js gruntfile](https://github.com/gruntjs/grunt/wiki/Getting-started) with: `npm install grunt-lmd`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-lmd');\n```\n\nSee [grunt-lmd](https://github.com/azproduction/grunt-lmd) for details\n\n## LMD Plugins\n\n### Off-package LMD module loader\n\n  * `async` - Provides `require.async()` function. if modules uses off-package module set this to true. See [demo](http://lmdjs.org/examples/plugins/async/), [code](examples/plugins/async/)\n  * `async_plain` - enables async require of both plain and function-modules\n  * `async_plainonly` - if you are using only plain modules enable that flag instead of `async_plain`. See [demo](http://lmdjs.org/examples/plugins/async_plainonly/), [code](examples/plugins/async_plainonly/)\n  * `preload` - this plugins is simmilar to `async`, it only caches modules without executing them. See [demo](http://lmdjs.org/examples/plugins/preload/), [code](examples/plugins/preload/)\n  * `preload_plain` - same as `async_plain`\n  * `async_plainonly` - same as `async_plainonly`\n\n### Cache\n\n  * `cache` - stores all application lmd itself + all modules in localStorage this flag will force all modules to be lazy. See [demo](http://lmdjs.org/examples/plugins/cache/), [code](examples/plugins/cache/)\n  * `cache_async` - enables localStorage cache for `require.async()`. See [demo](http://lmdjs.org/examples/plugins/cache_async/), [code](examples/plugins/cache_async/)\n\n### Non-LMD modules loader\n\n  * `js` - if you are going to load non LMD javascript modules `require.js()` set this flag to true. See [demo](http://lmdjs.org/examples/plugins/js/), [code](examples/plugins/js/)\n  * `css` - enables css-loader feature `require.css()`. See [demo](http://lmdjs.org/examples/plugins/css/), [code](examples/plugins/css/)\n  * `image` - enables image-loader feature `require.image()`. See [demo](http://lmdjs.org/examples/plugins/image/), [code](examples/plugins/image/)\n\n### Environment optimization\n\n  * `worker` - set true if LMD package will run as worker\n  * `node` - set true if LMD package will run as Node.js script. See [demo](http://lmdjs.org/examples/plugins/node/), [code](examples/plugins/node/)\n  * `ie` - **enabled by default** set false if script will run only in modern browsers\n  * `opera_mobile` - set true if LMD package will run in Opera Mobile\n  * `file_protocol` - set to true if LMD package itself or it parts will be loaded using `file://` protocol\n\n### Loaders (async, js, css, image) features and optimizations\n\n  * `race` - set true if you are performing simultaneous loading of the same resources\n  * `parallel` - enables simultaneous loading `require.js([a, b, c], ..)` resources will be executed in load order! And passed to callback in list order. See [demo](http://lmdjs.org/examples/plugins/parallel/), [code](examples/plugins/parallel/)\n  * `promise` - enables promise interface for all loaders `require.js('a.js').then()`. See [demo](http://lmdjs.org/examples/plugins/promise/), [code](examples/plugins/promise/)\n\n### Extra module types\n\n  * `shortcuts` - enables shortcuts in LMD package. See [demo](http://lmdjs.org/examples/plugins/promise/), [code](examples/plugins/promise/) (promise example uses shortcuts)\n  * `amd` - enables AMD RequreJS modules in LMD package. See [demo](http://lmdjs.org/examples/plugins/amd/), [code](examples/plugins/amd/)\n\n## Module management\n\n  * `match` - enables `require.match(RegExp): Object` requires every matched module name. See [demo](http://lmdjs.org/examples/plugins/match/), [code](examples/plugins/match/)\n\n### Stats and Code coverage\n\n  * `stats` - enables `require.stats()` function - every module require, load, eval, call statistics. See [demo](http://lmdjs.org/examples/plugins/stats/), [code](examples/plugins/stats/)\n  * `stats_coverage` - enables code coverage for all in-package modules, you can use list of module names to cover only modules in that list. See [demo](http://lmdjs.org/examples/plugins/stats_coverage/), [code](examples/plugins/stats_coverage/)\n  * `stats_coverage_async` - enables code coverage for all off-package function-modules for that option you can NOT use list of off-package module names. This options is VERY HEAVY +50Kb sources. Each async LMD module will be parsed and patched on the client - it may take A LOT of time\n  * `stats_sendto` - enables `require.stats.sendTo(host[, reportName])` function. It POSTs stats&coverage report to specified stats server\n\n## Special features\n\n  * glob - you can specify glob pattern (eg `\"${name}\": \"js/*.js\"`) to match multiply files. See [demo](http://lmdjs.org/examples/features/glob/), [code](examples/features/glob/)\n  * interpolation - you can use templates in your config string values to make your life easier. See [demo](http://lmdjs.org/examples/features/interpolation/), [code](examples/features/interpolation/)\n  * sandbox - some of your modules can be in the \"sandbox\". They cant require, but can provide some resources. See [demo](http://lmdjs.org/examples/features/sandbox/), [code](examples/features/sandbox/)\n  * optimize - optimisations of LMD source(not your project files) without minification/packing. See Optimisations section of [LMD Plugins overview](https://github.com/azproduction/lmd/wiki/LMD-Plugins-overview) wiki page. See [demo](http://lmdjs.org/examples/features/optimize/), [code](examples/features/optimize/)\n  * adaptation - using any JavaScripts as modules. See Wiki page [Adopting modules](https://github.com/azproduction/lmd/wiki/Adopting-modules). See [demo](http://lmdjs.org/examples/features/adaptation/), [code](examples/features/adaptation/)\n  * bundles - a way to split your application into separete parts. See [demo](http://lmdjs.org/examples/features/bundles/), [code](examples/features/bundles/)\n  * lmdjs_configs - you can write config files in JavaScript. See [demo](http://lmdjs.org/examples/features/lmdjs_configs/), [code](examples/features/lmdjs_configs/)\n  * multi_modules - using jQuery or Backbone with plugins? This feature is for you. See [demo](http://lmdjs.org/examples/features/multi_module/), [code](examples/features/multi_module/)\n  * ignore_module - ignore module from build, can be used with glob to ignore some modules. See [demo](http://lmdjs.org/examples/features/ignore_module/), [code](examples/features/ignore_module/)\n\n## Config extras\n\n  * mixins - you can mix your build configs (eg `lmd build index+ru+dev`) to create your special builds. See [demo](http://lmdjs.org/examples/features/mixins/), [code](examples/features/mixins/)\n  * depends - your modules can have own depends. You can notify LMD by adding global \"depends\" paramenter or specify \"depends\" for each module. See [demo](http://lmdjs.org/examples/features/depends/), [code](examples/features/depends/)\n  * extends - your configs can inherit other configs (eg development extends production). See [demo](http://lmdjs.org/examples/features/extends/), [code](examples/features/extends/)\n\n## Bash/zsh completion\n\nInstallation `lmd completion >> ~/.bashrc` (or `~/.zshrc`). Do not forget to restart shell.\n\n**Other ways**\n\n  * You can add `. <(lmd completion)` to your rc file\n  * Or, maybe: `lmd completion > /usr/local/etc/bash_completion.d/lmd`\n\n## Running tests\n\n`phantomjs` is required to run test via `npm test` see [test](test) for details\n\n--\n\nLMD is developing with help of [these people](AUTHORS)\n\nIf you like LMD - ★ it via `npm star lmd`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/azproduction/lmd/issues"
  },
  "homepage": "https://github.com/azproduction/lmd",
  "_id": "lmd@1.10.23",
  "_from": "lmd@"
}
